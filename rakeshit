local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()
local draw = Drawing.new
local cam = workspace.CurrentCamera
local plr = game.Players.LocalPlayer
local rs = game:GetService("RunService")
local repStorage = game:GetService("ReplicatedStorage")

local box = draw("Square")
box.Visible = false
box.Color = Color3.new(1,0,0)
box.Thickness = 2

local name = draw("Text")
name.Visible = false
name.Color = Color3.new(1,0,0)
name.Size = 18
name.Center = true
name.Outline = true
name.Text = "RAKE"

local dist = draw("Text")
dist.Visible = false
dist.Color = Color3.new(1,1,1)
dist.Size = 14
dist.Center = true
dist.Outline = true

local tracer = draw("Line")
tracer.Visible = false
tracer.Color = Color3.new(1,0,0)
tracer.Thickness = 1

local scrapESP = {}
local flareESP = {}
local supplyESP = {}
local configValues = {}
local screenInfoEnabled = false
local screenInfos = {}

local sprintEnabled = false
local espEnabled = false
local scrapEnabled = false
local flareEnabled = false
local supplyEnabled = false
local lightEnabled = false
local camUnlocked = false
local zoomLock = 15
local brightness = 1
local showName = true
local showDist = true
local showTracer = false
local espColor = Color3.new(1,0,0)
local boxThick = 1
local textSize = 15
local autoPickup = false
local pickupRange = 10

local scrapColor = Color3.new(1,1,1)
local scrapSize = 14
local scrapThick = 1
local flareColor = Color3.new(1,0.5,0)
local flareSize = 16
local flareThick = 2
local supplyColor = Color3.new(0,1,1)
local supplySize = 16
local supplyThick = 2

local infoX = 10
local infoY = 200
local infoTrans = 0.7
local infoBorderThick = 2
local infoTextSize = 16
local infoRainbow = false
local infoStyle = "Modern"
local infoTextColor = Color3.new(1,1,1)
local infoBorderColor = Color3.new(1,0,0)
local infoShowActive = true
local infoCompact = false

local scrapColors = {
    [1] = Color3.new(0.5,0.5,0.5),
    [2] = Color3.new(0,0.7,0),
    [3] = Color3.new(0,0.5,1),
    [4] = Color3.new(0.7,0,1),
    [5] = Color3.new(1,0.8,0),
}

local function updateInfoPositions()
    if not screenInfos.bg then return end
    
    local baseX, baseY = infoX, infoY
    screenInfos.bg.Position = Vector2.new(baseX, baseY)
    screenInfos.border.Position = Vector2.new(baseX, baseY)
    
    if infoStyle == "Modern" then
        screenInfos.title.Position = Vector2.new(baseX + 10, baseY + 5)
        screenInfos.time.Position = Vector2.new(baseX + 10, baseY + 30)
        screenInfos.power.Position = Vector2.new(baseX + 10, baseY + 50)
        screenInfos.active.Position = Vector2.new(baseX + 10, baseY + 75)
    elseif infoStyle == "Classic" then
        local width = infoCompact and 150 or 200
        screenInfos.title.Position = Vector2.new(baseX + width/2, baseY + 5)
        screenInfos.title.Center = true
        screenInfos.time.Position = Vector2.new(baseX + 10, baseY + 25)
        screenInfos.power.Position = Vector2.new(baseX + 10, baseY + 45)
        screenInfos.active.Position = Vector2.new(baseX + 10, baseY + 70)
    elseif infoStyle == "Minimal" then
        screenInfos.title.Visible = false
        screenInfos.time.Position = Vector2.new(baseX + 5, baseY + 5)
        screenInfos.power.Position = Vector2.new(baseX + 5, baseY + 25)
        screenInfos.active.Position = Vector2.new(baseX + 5, baseY + 45)
    elseif infoStyle == "Gaming" then
        local width = infoCompact and 150 or 200
        screenInfos.title.Position = Vector2.new(baseX + width/2, baseY + 5)
        screenInfos.title.Center = true
        screenInfos.time.Position = Vector2.new(baseX + 15, baseY + 35)
        screenInfos.power.Position = Vector2.new(baseX + 15, baseY + 60)
        screenInfos.active.Position = Vector2.new(baseX + 15, baseY + 90)
    end
end

local function updateInfoTextSizes()
    if not screenInfos.title then return end
    
    screenInfos.title.Size = infoTextSize + 2
    screenInfos.time.Size = infoTextSize
    screenInfos.power.Size = infoTextSize
    screenInfos.active.Size = infoTextSize - 2
end

local function updateInfoColors()
    if not screenInfos.title then return end
    
    screenInfos.time.Color = infoTextColor
    screenInfos.power.Color = infoTextColor
end

local function createScrapESP(model)
    if scrapESP[model] then return end
    
    local esp = {}
    esp.box = draw("Square")
    esp.box.Thickness = 1
    esp.box.Filled = false
    esp.box.Visible = false
    
    esp.text = draw("Text")
    esp.text.Size = 14
    esp.text.Center = true
    esp.text.Outline = true
    esp.text.Visible = false
    
    esp.dist = draw("Text")
    esp.dist.Size = 12
    esp.dist.Center = true
    esp.dist.Outline = true
    esp.dist.Visible = false
    
    scrapESP[model] = esp
end

local function createSupplyESP(model)
    if supplyESP[model] then return end
    
    local esp = {}
    esp.box = draw("Square")
    esp.box.Thickness = supplyThick
    esp.box.Filled = false
    esp.box.Visible = false
    esp.box.Color = supplyColor
    
    esp.text = draw("Text")
    esp.text.Size = supplySize
    esp.text.Center = true
    esp.text.Outline = true
    esp.text.Visible = false
    esp.text.Color = supplyColor
    esp.text.Text = "SUPPLY BOX"
    
    esp.dist = draw("Text")
    esp.dist.Size = 14
    esp.dist.Center = true
    esp.dist.Outline = true
    esp.dist.Visible = false
    esp.dist.Color = Color3.new(1,1,1)
    
    supplyESP[model] = esp
end

local Window = Rayfield:CreateWindow({
   Name = "rake shit",
   LoadingTitle = "rake shit",
   LoadingSubtitle = "loading...",
   Theme = "Default",
   DisableRayfieldPrompts = true,
   ConfigurationSaving = {
      Enabled = false,
      FolderName = "RakeSHIT",
      FileName = "config"
   }
})

local MainTab = Window:CreateTab("Main", 4483362458)
local SettingsTab = Window:CreateTab("Settings", 4483362458)
local InfoTab = Window:CreateTab("Info", 4483362458)
local ConfigTab = Window:CreateTab("Config", 4483362458)
local ExperimentalTab = Window:CreateTab("Experimental", 4483362458)

local ESPSection = MainTab:CreateSection("ESP")

local ESPToggle = MainTab:CreateToggle({
   Name = "Rake ESP",
   CurrentValue = false,
   Flag = "esp",
   Callback = function(v)
      espEnabled = v
      configValues.esp = v
   end,
})

local ScrapToggle = MainTab:CreateToggle({
   Name = "Scrap ESP",
   CurrentValue = false,
   Flag = "scrapesp",
   Callback = function(v)
      scrapEnabled = v
      configValues.scrapesp = v
      if not v then
         for _,esp in pairs(scrapESP) do
            esp.box.Visible = false
            esp.text.Visible = false
            esp.dist.Visible = false
         end
      end
   end,
})

local FlareToggle = MainTab:CreateToggle({
   Name = "Flare Gun ESP",
   CurrentValue = false,
   Flag = "flareesp",
   Callback = function(v)
      flareEnabled = v
      configValues.flareesp = v
      if not v and flareESP.box then
         flareESP.box.Visible = false
         flareESP.text.Visible = false
         flareESP.dist.Visible = false
      end
   end,
})

local SupplyToggle = MainTab:CreateToggle({
   Name = "Supply Box ESP",
   CurrentValue = false,
   Flag = "supplyesp",
   Callback = function(v)
      supplyEnabled = v
      configValues.supplyesp = v
      if not v then
         for _,esp in pairs(supplyESP) do
            esp.box.Visible = false
            esp.text.Visible = false
            esp.dist.Visible = false
         end
      end
   end,
})

local VisualsSection = MainTab:CreateSection("VISUALS")

local LightToggle = MainTab:CreateToggle({
   Name = "Fullbright + No Effects",
   CurrentValue = false,
   Flag = "light",
   Callback = function(v)
      lightEnabled = v
      configValues.light = v
      if v then
         for _,effect in pairs(game.Lighting:GetChildren()) do
            if effect:IsA("BlurEffect") or effect:IsA("DepthOfFieldEffect") or effect:IsA("SunRaysEffect") or effect:IsA("BloomEffect") or effect:IsA("ColorCorrectionEffect") then
               effect.Enabled = false
            end
         end
      end
   end,
})

local BrightSlider = MainTab:CreateSlider({
   Name = "Brightness",
   Range = {0, 5},
   Increment = 0.5,
   Suffix = "",
   CurrentValue = 1,
   Flag = "bright",
   Callback = function(v)
      brightness = v
      configValues.bright = v
   end,
})

local CamToggle = MainTab:CreateToggle({
   Name = "Unlock Camera",
   CurrentValue = false,
   Flag = "cam",
   Callback = function(v)
      camUnlocked = v
      configValues.cam = v
   end,
})

local ZoomSlider = MainTab:CreateSlider({
   Name = "Camera Distance",
   Range = {5, 50},
   Increment = 5,
   Suffix = "",
   CurrentValue = 15,
   Flag = "zoom",
   Callback = function(v)
      zoomLock = v
      configValues.zoom = v
   end,
})

local CharacterSection = MainTab:CreateSection("CHARACTER")

local SprintToggle = MainTab:CreateToggle({
   Name = "Infinite Sprint",
   CurrentValue = false,
   Flag = "sprint",
   Callback = function(v)
      sprintEnabled = v
      configValues.sprint = v
   end,
})

local AutoPickupToggle = MainTab:CreateToggle({
   Name = "Auto Pickup Scrap",
   CurrentValue = false,
   Flag = "autopickup",
   Callback = function(v)
      autoPickup = v
      configValues.autopickup = v
   end,
})

local PickupRangeSlider = MainTab:CreateSlider({
   Name = "Pickup Range",
   Range = {5, 50},
   Increment = 5,
   Suffix = "m",
   CurrentValue = 10,
   Flag = "pickuprange",
   Callback = function(v)
      pickupRange = v
      configValues.pickuprange = v
   end,
})

local ScreenInfoSection = MainTab:CreateSection("SCREEN INFO")

local ScreenInfoToggle = MainTab:CreateToggle({
   Name = "Show Screen Info",
   CurrentValue = false,
   Flag = "screeninfo",
   Callback = function(v)
      screenInfoEnabled = v
      configValues.screeninfo = v
      for _,info in pairs(screenInfos) do
         if info.Visible ~= nil then
            info.Visible = v
         end
      end
   end,
})

local RakeSection = SettingsTab:CreateSection("RAKE")

local ColorPicker = SettingsTab:CreateColorPicker({
   Name = "Rake Color",
   Color = Color3.fromRGB(255, 0, 0),
   Flag = "espcolor",
   Callback = function(v)
      espColor = v
      configValues.espcolor = {v.R * 255, v.G * 255, v.B * 255}
      box.Color = v
      name.Color = v
      tracer.Color = v
   end
})

local ThickSlider = SettingsTab:CreateSlider({
   Name = "Box Thickness",
   Range = {1, 5},
   Increment = 1,
   Suffix = "px",
   CurrentValue = 1,
   Flag = "thick",
   Callback = function(v)
      boxThick = v
      configValues.thick = v
      box.Thickness = v
   end,
})

local TextSlider = SettingsTab:CreateSlider({
   Name = "Text Size",
   Range = {10, 30},
   Increment = 2,
   Suffix = "px",
   CurrentValue = 15,
   Flag = "textsize",
   Callback = function(v)
      textSize = v
      configValues.textsize = v
      name.Size = v
      dist.Size = v - 4
   end,
})

local NameToggle = SettingsTab:CreateToggle({
   Name = "Show Name",
   CurrentValue = true,
   Flag = "showname",
   Callback = function(v)
      showName = v
      configValues.showname = v
   end,
})

local DistToggle = SettingsTab:CreateToggle({
   Name = "Show Distance",
   CurrentValue = true,
   Flag = "showdist",
   Callback = function(v)
      showDist = v
      configValues.showdist = v
   end,
})

local TracerToggle = SettingsTab:CreateToggle({
   Name = "Show Tracer",
   CurrentValue = false,
   Flag = "tracer",
   Callback = function(v)
      showTracer = v
      configValues.tracer = v
   end,
})

local ScrapSection = SettingsTab:CreateSection("SCRAP")

local ScrapColorToggle = SettingsTab:CreateToggle({
   Name = "Use Rarity Colors",
   CurrentValue = true,
   Flag = "scrapraritycolor",
   Callback = function(v)
      configValues.scrapraritycolor = v
   end,
})

local ScrapColorPicker = SettingsTab:CreateColorPicker({
   Name = "Scrap Color (If not rarity)",
   Color = Color3.fromRGB(255, 255, 255),
   Flag = "scrapcolor",
   Callback = function(v)
      scrapColor = v
      configValues.scrapcolor = {v.R * 255, v.G * 255, v.B * 255}
   end
})

local ScrapSizeSlider = SettingsTab:CreateSlider({
   Name = "Scrap Text Size",
   Range = {10, 20},
   Increment = 1,
   Suffix = "px",
   CurrentValue = 14,
   Flag = "scrapsize",
   Callback = function(v)
      scrapSize = v
      configValues.scrapsize = v
   end,
})

local ScrapThickSlider = SettingsTab:CreateSlider({
   Name = "Scrap Box Thickness",
   Range = {1, 5},
   Increment = 1,
   Suffix = "px",
   CurrentValue = 1,
   Flag = "scrapthick",
   Callback = function(v)
      scrapThick = v
      configValues.scrapthick = v
   end,
})

local FlareSection = SettingsTab:CreateSection("FLARE GUN")

local FlareColorPicker = SettingsTab:CreateColorPicker({
   Name = "Flare Color",
   Color = Color3.fromRGB(255, 128, 0),
   Flag = "flarecolor",
   Callback = function(v)
      flareColor = v
      configValues.flarecolor = {v.R * 255, v.G * 255, v.B * 255}
      if flareESP.box then
         flareESP.box.Color = v
         flareESP.text.Color = v
      end
   end
})

local FlareSizeSlider = SettingsTab:CreateSlider({
   Name = "Flare Text Size",
   Range = {10, 25},
   Increment = 1,
   Suffix = "px",
   CurrentValue = 16,
   Flag = "flaresize",
   Callback = function(v)
      flareSize = v
      configValues.flaresize = v
      if flareESP.text then
         flareESP.text.Size = v
      end
   end,
})

local FlareThickSlider = SettingsTab:CreateSlider({
   Name = "Flare Box Thickness",
   Range = {1, 5},
   Increment = 1,
   Suffix = "px",
   CurrentValue = 2,
   Flag = "flarethick",
   Callback = function(v)
      flareThick = v
      configValues.flarethick = v
      if flareESP.box then
         flareESP.box.Thickness = v
      end
   end,
})

local SupplySection = SettingsTab:CreateSection("SUPPLY BOX")

local SupplyColorPicker = SettingsTab:CreateColorPicker({
   Name = "Supply Color",
   Color = Color3.fromRGB(0, 255, 255),
   Flag = "supplycolor",
   Callback = function(v)
      supplyColor = v
      configValues.supplycolor = {v.R * 255, v.G * 255, v.B * 255}
   end
})

local SupplySizeSlider = SettingsTab:CreateSlider({
   Name = "Supply Text Size",
   Range = {10, 25},
   Increment = 1,
   Suffix = "px",
   CurrentValue = 16,
   Flag = "supplysize",
   Callback = function(v)
      supplySize = v
      configValues.supplysize = v
   end,
})

local SupplyThickSlider = SettingsTab:CreateSlider({
   Name = "Supply Box Thickness",
   Range = {1, 5},
   Increment = 1,
   Suffix = "px",
   CurrentValue = 2,
   Flag = "supplythick",
   Callback = function(v)
      supplyThick = v
      configValues.supplythick = v
   end,
})

local ScreenInfoSection = SettingsTab:CreateSection("SCREEN INFO")

local InfoStyleDropdown = SettingsTab:CreateDropdown({
    Name = "Info Style",
    Options = {"Modern", "Classic", "Minimal", "Gaming"},
    CurrentOption = {"Modern"},
    MultipleOptions = false,
    Flag = "infostyle",
    Callback = function(v)
        infoStyle = v[1]
        configValues.infostyle = v[1]
        updateInfoPositions()
    end,
})

local InfoXSlider = SettingsTab:CreateSlider({
   Name = "Info X Position",
   Range = {0, 1000},
   Increment = 10,
   Suffix = "px",
   CurrentValue = 10,
   Flag = "infox",
   Callback = function(v)
      infoX = v
      configValues.infox = v
      updateInfoPositions()
   end,
})

local InfoYSlider = SettingsTab:CreateSlider({
   Name = "Info Y Position",
   Range = {0, 800},
   Increment = 10,
   Suffix = "px",
   CurrentValue = 200,
   Flag = "infoy",
   Callback = function(v)
      infoY = v
      configValues.infoy = v
      updateInfoPositions()
   end,
})

local InfoTransSlider = SettingsTab:CreateSlider({
   Name = "Background Transparency",
   Range = {0, 1},
   Increment = 0.1,
   Suffix = "",
   CurrentValue = 0.7,
   Flag = "infotrans",
   Callback = function(v)
      infoTrans = v
      configValues.infotrans = v
      if screenInfos.bg then
         screenInfos.bg.Transparency = v
      end
   end,
})

local InfoTextSizeSlider = SettingsTab:CreateSlider({
   Name = "Info Text Size",
   Range = {12, 24},
   Increment = 1,
   Suffix = "px",
   CurrentValue = 16,
   Flag = "infotextsize",
   Callback = function(v)
      infoTextSize = v
      configValues.infotextsize = v
      updateInfoTextSizes()
   end,
})

local InfoBorderThickSlider = SettingsTab:CreateSlider({
   Name = "Border Thickness",
   Range = {1, 5},
   Increment = 1,
   Suffix = "px",
   CurrentValue = 2,
   Flag = "infoborderthick",
   Callback = function(v)
      infoBorderThick = v
      configValues.infoborderthick = v
      if screenInfos.border then
         screenInfos.border.Thickness = v
      end
   end,
})

local InfoRainbowToggle = SettingsTab:CreateToggle({
   Name = "Rainbow Border",
   CurrentValue = false,
   Flag = "inforainbow",
   Callback = function(v)
      infoRainbow = v
      configValues.inforainbow = v
   end,
})

local InfoTextColorPicker = SettingsTab:CreateColorPicker({
   Name = "Text Color",
   Color = Color3.fromRGB(255, 255, 255),
   Flag = "infotextcolor",
   Callback = function(v)
      infoTextColor = v
      configValues.infotextcolor = {v.R * 255, v.G * 255, v.B * 255}
      updateInfoColors()
   end
})

local InfoBorderColorPicker = SettingsTab:CreateColorPicker({
   Name = "Border Color",
   Color = Color3.fromRGB(255, 0, 0),
   Flag = "infobordercolor",
   Callback = function(v)
      infoBorderColor = v
      configValues.infobordercolor = {v.R * 255, v.G * 255, v.B * 255}
      if screenInfos.border and not infoRainbow then
         screenInfos.border.Color = v
      end
   end
})

local InfoShowActiveToggle = SettingsTab:CreateToggle({
   Name = "Show Active Systems",
   CurrentValue = true,
   Flag = "infoshowactive",
   Callback = function(v)
      infoShowActive = v
      configValues.infoshowactive = v
   end,
})

local InfoCompactToggle = SettingsTab:CreateToggle({
   Name = "Compact Mode",
   CurrentValue = false,
   Flag = "infocompact",
   Callback = function(v)
      infoCompact = v
      configValues.infocompact = v
      updateInfoPositions()
   end,
})

local configFolder = "RakeConfigs"
local configs = {}
local autoLoadConfig = nil

local function refreshConfigs()
    configs = {}
    if isfolder(configFolder) then
        for _,file in pairs(listfiles(configFolder)) do
            local name = file:match("([^/]+)%.json$")
            if name then
                table.insert(configs, name)
            end
        end
    end
    return configs
end

if not isfolder(configFolder) then
    makefolder(configFolder)
end

local function loadConfig(configName)
    if isfile(configFolder.."/"..configName..".json") then
        local data = game:GetService("HttpService"):JSONDecode(readfile(configFolder.."/"..configName..".json"))
        
        ESPToggle:Set(data.esp or false)
        ScrapToggle:Set(data.scrapesp or false)
        FlareToggle:Set(data.flareesp or false)
        SupplyToggle:Set(data.supplyesp or false)
        LightToggle:Set(data.light or false)
        SprintToggle:Set(data.sprint or false)
        CamToggle:Set(data.cam or false)
        AutoPickupToggle:Set(data.autopickup or false)
        ScreenInfoToggle:Set(data.screeninfo or false)
        BrightSlider:Set(data.bright or 1)
        ZoomSlider:Set(data.zoom or 15)
        PickupRangeSlider:Set(data.pickuprange or 10)
        ThickSlider:Set(data.thick or 1)
        TextSlider:Set(data.textsize or 15)
        NameToggle:Set(data.showname ~= false)
        DistToggle:Set(data.showdist ~= false)
        TracerToggle:Set(data.tracer or false)
        ScrapColorToggle:Set(data.scrapraritycolor ~= false)
        ScrapSizeSlider:Set(data.scrapsize or 14)
        ScrapThickSlider:Set(data.scrapthick or 1)
        FlareSizeSlider:Set(data.flaresize or 16)
        FlareThickSlider:Set(data.flarethick or 2)
        SupplySizeSlider:Set(data.supplysize or 16)
        SupplyThickSlider:Set(data.supplythick or 2)
        InfoStyleDropdown:Set({data.infostyle or "Modern"})
        InfoXSlider:Set(data.infox or 10)
        InfoYSlider:Set(data.infoy or 200)
        InfoTransSlider:Set(data.infotrans or 0.7)
        InfoTextSizeSlider:Set(data.infotextsize or 16)
        InfoBorderThickSlider:Set(data.infoborderthick or 2)
        InfoRainbowToggle:Set(data.inforainbow or false)
        InfoShowActiveToggle:Set(data.infoshowactive ~= false)
        InfoCompactToggle:Set(data.infocompact or false)
        
        if data.espcolor then
            ColorPicker:Set(Color3.fromRGB(data.espcolor[1], data.espcolor[2], data.espcolor[3]))
        end
        if data.scrapcolor then
            ScrapColorPicker:Set(Color3.fromRGB(data.scrapcolor[1], data.scrapcolor[2], data.scrapcolor[3]))
        end
        if data.flarecolor then
            FlareColorPicker:Set(Color3.fromRGB(data.flarecolor[1], data.flarecolor[2], data.flarecolor[3]))
        end
        if data.supplycolor then
            SupplyColorPicker:Set(Color3.fromRGB(data.supplycolor[1], data.supplycolor[2], data.supplycolor[3]))
        end
        if data.infotextcolor then
            InfoTextColorPicker:Set(Color3.fromRGB(data.infotextcolor[1], data.infotextcolor[2], data.infotextcolor[3]))
        end
        if data.infobordercolor then
            InfoBorderColorPicker:Set(Color3.fromRGB(data.infobordercolor[1], data.infobordercolor[2], data.infobordercolor[3]))
        end
    end
end

if isfile(configFolder.."/autoload.txt") then
    autoLoadConfig = readfile(configFolder.."/autoload.txt")
end

local selectedConfig = "default"

local ConfigDropdown = ConfigTab:CreateDropdown({
    Name = "Select Config",
    Options = refreshConfigs(),
    CurrentOption = {"default"},
    MultipleOptions = false,
    Flag = "configselect",
    Callback = function(v)
        selectedConfig = v[1] or "default"
    end,
})

local ConfigInput = ConfigTab:CreateInput({
    Name = "Config Name",
    PlaceholderText = "Enter config name",
    CurrentValue = "",
    Flag = "configname",
    Callback = function(v)
        selectedConfig = v ~= "" and v or selectedConfig
    end,
})

local SaveButton = ConfigTab:CreateButton({
    Name = "Save Config",
    Callback = function()
        writefile(configFolder.."/"..selectedConfig..".json", game:GetService("HttpService"):JSONEncode(configValues))
        ConfigDropdown:Set(refreshConfigs())
    end,
})

local LoadButton = ConfigTab:CreateButton({
    Name = "Load Config",
    Callback = function()
        loadConfig(selectedConfig)
    end,
})

local DeleteButton = ConfigTab:CreateButton({
    Name = "Delete Config",
    Callback = function()
        if selectedConfig ~= "default" and isfile(configFolder.."/"..selectedConfig..".json") then
            delfile(configFolder.."/"..selectedConfig..".json")
            ConfigDropdown:Set(refreshConfigs())
            selectedConfig = "default"
        end
    end,
})

local RefreshButton = ConfigTab:CreateButton({
    Name = "Refresh List",
    Callback = function()
        ConfigDropdown:Set(refreshConfigs())
    end,
})

local AutoLoadButton = ConfigTab:CreateButton({
    Name = "Set as Auto-Load",
    Callback = function()
        writefile(configFolder.."/autoload.txt", selectedConfig)
        autoLoadConfig = selectedConfig
    end,
})

local ClearAutoLoadButton = ConfigTab:CreateButton({
    Name = "Clear Auto-Load",
    Callback = function()
        if isfile(configFolder.."/autoload.txt") then
            delfile(configFolder.."/autoload.txt")
            autoLoadConfig = nil
        end
    end,
})

local CreditLabel = InfoTab:CreateLabel("made by t.me/rakeshittnes")
local TimerLabel = InfoTab:CreateLabel("Time: 0:00")
local PowerLabel = InfoTab:CreateLabel("Power: 0%")
local DoorLabel = InfoTab:CreateLabel("SafeHouse Door: OFF")
local SHLightLabel = InfoTab:CreateLabel("SafeHouse Light: OFF")
local TowerLabel = InfoTab:CreateLabel("Tower Light: OFF")

local ExperimentalLabel = ExperimentalTab:CreateLabel("Testing Features!")

flareESP.box = draw("Square")
flareESP.box.Thickness = 2
flareESP.box.Filled = false
flareESP.box.Visible = false
flareESP.box.Color = Color3.new(1,0.5,0)

flareESP.text = draw("Text")
flareESP.text.Size = 16
flareESP.text.Center = true
flareESP.text.Outline = true
flareESP.text.Visible = false
flareESP.text.Color = Color3.new(1,0.5,0)
flareESP.text.Text = "FLARE GUN"

flareESP.dist = draw("Text")
flareESP.dist.Size = 14
flareESP.dist.Center = true
flareESP.dist.Outline = true
flareESP.dist.Visible = false
flareESP.dist.Color = Color3.new(1,1,1)

screenInfos.bg = draw("Square")
screenInfos.bg.Size = Vector2.new(200, 120)
screenInfos.bg.Position = Vector2.new(10, 200)
screenInfos.bg.Color = Color3.new(0, 0, 0)
screenInfos.bg.Transparency = 0.7
screenInfos.bg.Filled = true
screenInfos.bg.Visible = false

screenInfos.border = draw("Square")
screenInfos.border.Size = Vector2.new(200, 120)
screenInfos.border.Position = Vector2.new(10, 200)
screenInfos.border.Color = Color3.new(1, 0, 0)
screenInfos.border.Thickness = 2
screenInfos.border.Filled = false
screenInfos.border.Visible = false

screenInfos.title = draw("Text")
screenInfos.title.Text = "RAKE STATS"
screenInfos.title.Size = 18
screenInfos.title.Position = Vector2.new(20, 205)
screenInfos.title.Color = Color3.new(1, 0, 0)
screenInfos.title.Outline = true
screenInfos.title.Visible = false

screenInfos.time = draw("Text")
screenInfos.time.Text = "TIME: 0:00"
screenInfos.time.Size = 16
screenInfos.time.Position = Vector2.new(20, 230)
screenInfos.time.Color = Color3.new(1, 1, 1)
screenInfos.time.Outline = true
screenInfos.time.Visible = false

screenInfos.power = draw("Text")
screenInfos.power.Text = "ENERGY: 0%"
screenInfos.power.Size = 16
screenInfos.power.Position = Vector2.new(20, 250)
screenInfos.power.Color = Color3.new(1, 1, 1)
screenInfos.power.Outline = true
screenInfos.power.Visible = false

screenInfos.active = draw("Text")
screenInfos.active.Text = ""
screenInfos.active.Size = 14
screenInfos.active.Position = Vector2.new(20, 275)
screenInfos.active.Color = Color3.new(0, 1, 0)
screenInfos.active.Outline = true
screenInfos.active.Visible = false

if autoLoadConfig and isfile(configFolder.."/"..autoLoadConfig..".json") then
    task.wait(0.5)
    loadConfig(autoLoadConfig)
end

local rainbowHue = 0

rs.RenderStepped:Connect(function()
    if infoRainbow and screenInfos.border then
        rainbowHue = (rainbowHue + 0.005) % 1
        screenInfos.border.Color = Color3.fromHSV(rainbowHue, 1, 1)
    end
    
    if lightEnabled then
        local l = game.Lighting
        l.Brightness = brightness
        l.Ambient = Color3.new(0.7,0.7,0.7)
        l.OutdoorAmbient = Color3.new(0.7,0.7,0.7)
        l.FogEnd = 100000
        l.ClockTime = 14
    end
    
    if camUnlocked then
        plr.CameraMinZoomDistance = zoomLock
        plr.CameraMaxZoomDistance = zoomLock
        plr.CameraMode = Enum.CameraMode.Classic
    end
    
    if sprintEnabled and plr.Character and plr.Character:FindFirstChild("Humanoid") then
        plr.Character.Humanoid.WalkSpeed = 25
    end
    
    if autoPickup and plr.Character and plr.Character:FindFirstChild("HumanoidRootPart") then
        local filter = workspace:FindFirstChild("Filter")
        if filter then
            local spawns = filter:FindFirstChild("ScrapSpawns")
            if spawns then
                for _,itemSpawn in pairs(spawns:GetChildren()) do
                    if itemSpawn.Name:match("ItemSpawn") then
                        for _,scrapFolder in pairs(itemSpawn:GetChildren()) do
                            if scrapFolder.Name:match("Scrap%d") then
                                local scrapPart = scrapFolder:FindFirstChild("Scrap")
                                if scrapPart and scrapPart:FindFirstChild("TouchInterest") then
                                    local dist = (plr.Character.HumanoidRootPart.Position - scrapPart.Position).Magnitude
                                    if dist <= pickupRange then
                                        firetouchinterest(plr.Character.HumanoidRootPart, scrapPart, 0)
                                        firetouchinterest(plr.Character.HumanoidRootPart, scrapPart, 1)
                                    end
                                end
                            end
                        end
                    end
                end
            end
        end
    end
    
    local timer = repStorage:FindFirstChild("Timer")
    if timer then
        local mins = math.floor(timer.Value / 60)
        local secs = timer.Value % 60
        local timeText = string.format("Time: %d:%02d", mins, secs)
        TimerLabel:Set(timeText)
        if screenInfoEnabled then
            if infoCompact then
                screenInfos.time.Text = string.format("%d:%02d", mins, secs)
            else
                screenInfos.time.Text = string.format("TIME: %d:%02d", mins, secs)
            end
        end
    end
    
    local power = repStorage:FindFirstChild("PowerValues")
    if power then
        local activeList = {}
        local activeCount = 0
        
        if power:FindFirstChild("PowerLevel") then
            local powerPercent = math.floor(power.PowerLevel.Value / 10)
            local powerText = "Power: "..powerPercent.."%"
            PowerLabel:Set(powerText)
            if screenInfoEnabled then
                if infoCompact then
                    screenInfos.power.Text = powerPercent.."%"
                else
                    screenInfos.power.Text = "ENERGY: "..powerPercent.."%"
                end
                if powerPercent <= 20 then
                    screenInfos.power.Color = Color3.new(1, 0, 0)
                elseif powerPercent <= 50 then
                    screenInfos.power.Color = Color3.new(1, 1, 0)
                else
                    screenInfos.power.Color = Color3.new(0, 1, 0)
                end
            end
        end
        
        local doorOn = power:FindFirstChild("UsingSHDoor") and power.UsingSHDoor.Value
        local lightOn = power:FindFirstChild("UsingSHLight") and power.UsingSHLight.Value
        local towerOn = power:FindFirstChild("UsingTowerLight") and power.UsingTowerLight.Value
        
        if doorOn then
            table.insert(activeList, infoCompact and "DOOR" or "SH DOOR: ON")
            activeCount = activeCount + 1
        end
        if lightOn then
            table.insert(activeList, infoCompact and "LIGHT" or "SH LIGHT: ON")
            activeCount = activeCount + 1
        end
        if towerOn then
            table.insert(activeList, infoCompact and "TOWER" or "TOWER: ON")
            activeCount = activeCount + 1
        end
        
        DoorLabel:Set("SafeHouse Door: "..(doorOn and "ON" or "OFF"))
        SHLightLabel:Set("SafeHouse Light: "..(lightOn and "ON" or "OFF"))
        TowerLabel:Set("Tower Light: "..(towerOn and "ON" or "OFF"))
        
        if screenInfoEnabled and infoShowActive then
            if #activeList > 0 then
                screenInfos.active.Text = table.concat(activeList, "\n")
                screenInfos.active.Color = Color3.new(0, 1, 0)
                screenInfos.active.Visible = true
            else
                screenInfos.active.Text = infoCompact and "NONE" or "NO ACTIVE SYSTEMS"
                screenInfos.active.Color = Color3.new(0.5, 0.5, 0.5)
                screenInfos.active.Visible = true
            end
            
            local baseHeight = infoShowActive and (90 + (activeCount * 20)) or 70
            if infoStyle == "Gaming" then
                baseHeight = baseHeight + 20
            elseif infoStyle == "Minimal" then
                baseHeight = baseHeight - 20
            end
            
            screenInfos.bg.Size = Vector2.new(infoCompact and 150 or 200, baseHeight)
            screenInfos.border.Size = Vector2.new(infoCompact and 150 or 200, baseHeight)
        end
    end
    
    if scrapEnabled then
        for model, esp in pairs(scrapESP) do
            if not model.Parent then
                esp.box.Visible = false
                esp.text.Visible = false
                esp.dist.Visible = false
            end
        end
        
        local filter = workspace:FindFirstChild("Filter")
        if filter then
            local spawns = filter:FindFirstChild("ScrapSpawns")
            if spawns then
                for _,itemSpawn in pairs(spawns:GetChildren()) do
                    if itemSpawn.Name:match("ItemSpawn") then
                        for _,scrapFolder in pairs(itemSpawn:GetChildren()) do
                            if scrapFolder.Name:match("Scrap%d") then
                                local scrapPart = scrapFolder:FindFirstChild("Scrap")
                                if scrapPart then
                                    createScrapESP(scrapPart)
                                    local esp = scrapESP[scrapPart]
                                    
                                    if plr.Character and plr.Character:FindFirstChild("HumanoidRootPart") then
                                        local pos, vis = cam:WorldToViewportPoint(scrapPart.Position)
                                        if vis then
                                            local size = 1500 / pos.Z
                                            esp.box.Size = Vector2.new(size, size)
                                            esp.box.Position = Vector2.new(pos.X - size/2, pos.Y - size/2)
                                            esp.box.Thickness = scrapThick
                                            
                                            local level = scrapFolder:FindFirstChild("LevelVal")
                                            local points = scrapFolder:FindFirstChild("PointsVal")
                                            
                                            if configValues.scrapraritycolor ~= false and level then
                                                esp.box.Color = scrapColors[level.Value] or Color3.new(1,1,1)
                                            else
                                                esp.box.Color = scrapColor
                                            end
                                            
                                            local textY = pos.Y + size/2 + 5
                                            local levelText = level and "Lvl "..level.Value or ""
                                            local pointText = points and points.Value.."pts" or "???"
                                            
                                            esp.text.Position = Vector2.new(pos.X, textY)
                                            esp.text.Text = levelText..(levelText ~= "" and " | " or "")..pointText
                                            esp.text.Color = esp.box.Color
                                            esp.text.Size = scrapSize
                                            
                                            esp.dist.Position = Vector2.new(pos.X, textY + scrapSize + 2)
                                            esp.dist.Text = math.floor((plr.Character.HumanoidRootPart.Position - scrapPart.Position).Magnitude).."m"
                                            esp.dist.Color = Color3.new(1,1,1)
                                            esp.dist.Size = scrapSize - 2
                                            esp.dist.Visible = true
                                            
                                            esp.box.Visible = true
                                            esp.text.Visible = true
                                        else
                                            esp.box.Visible = false
                                            esp.text.Visible = false
                                            esp.dist.Visible = false
                                        end
                                    end
                                end
                            end
                        end
                    end
                end
            end
        end
    else
        for _,esp in pairs(scrapESP) do
            esp.box.Visible = false
            esp.text.Visible = false
            esp.dist.Visible = false
        end
    end
    
    if flareEnabled then
        local flarePickup = workspace:FindFirstChild("FlareGunPickUp")
        if flarePickup then
            local flareGun = flarePickup:FindFirstChild("FlareGun")
            if flareGun and plr.Character and plr.Character:FindFirstChild("HumanoidRootPart") then
                local pos, vis = cam:WorldToViewportPoint(flareGun.Position)
                if vis then
                    local size = 1800 / pos.Z
                    flareESP.box.Size = Vector2.new(size, size)
                    flareESP.box.Position = Vector2.new(pos.X - size/2, pos.Y - size/2)
                    flareESP.box.Thickness = flareThick
                    flareESP.box.Color = flareColor
                    flareESP.box.Visible = true
                    
                    flareESP.text.Position = Vector2.new(pos.X, pos.Y + size/2 + 5)
                    flareESP.text.Size = flareSize
                    flareESP.text.Color = flareColor
                    flareESP.text.Visible = true
                    
                    flareESP.dist.Position = Vector2.new(pos.X, pos.Y + size/2 + 5 + flareSize + 2)
                    flareESP.dist.Text = math.floor((plr.Character.HumanoidRootPart.Position - flareGun.Position).Magnitude).."m"
                    flareESP.dist.Visible = true
                else
                    flareESP.box.Visible = false
                    flareESP.text.Visible = false
                    flareESP.dist.Visible = false
                end
            else
                flareESP.box.Visible = false
                flareESP.text.Visible = false
                flareESP.dist.Visible = false
            end
        else
            flareESP.box.Visible = false
            flareESP.text.Visible = false
            flareESP.dist.Visible = false
        end
    else
        flareESP.box.Visible = false
        flareESP.text.Visible = false
        flareESP.dist.Visible = false
    end

    if supplyEnabled then
        for model, esp in pairs(supplyESP) do
            if not model.Parent then
                esp.box.Visible = false
                esp.text.Visible = false
                esp.dist.Visible = false
            end
        end
        
        local debris = workspace:FindFirstChild("Debris")
        if debris then
            local crates = debris:FindFirstChild("SupplyCrates")
            if crates then
                for _,crate in pairs(crates:GetChildren()) do
                    if crate:IsA("Model") then
                        createSupplyESP(crate)
                        local esp = supplyESP[crate]
                        
                        if plr.Character and plr.Character:FindFirstChild("HumanoidRootPart") then
                            local cf = crate:GetBoundingBox()
                            local pos, vis = cam:WorldToViewportPoint(cf.Position)
                            if vis then
                                local size = 2500 / pos.Z
                                esp.box.Size = Vector2.new(size, size)
                                esp.box.Position = Vector2.new(pos.X - size/2, pos.Y - size/2)
                                esp.box.Thickness = supplyThick
                                esp.box.Color = supplyColor
                                esp.box.Visible = true
                                
                                esp.text.Position = Vector2.new(pos.X, pos.Y + size/2 + 5)
                                esp.text.Size = supplySize
                                esp.text.Color = supplyColor
                                esp.text.Visible = true
                                
                                esp.dist.Position = Vector2.new(pos.X, pos.Y + size/2 + 5 + supplySize + 2)
                                esp.dist.Text = math.floor((plr.Character.HumanoidRootPart.Position - cf.Position).Magnitude).."m"
                                esp.dist.Visible = true
                            else
                                esp.box.Visible = false
                                esp.text.Visible = false
                                esp.dist.Visible = false
                            end
                        end
                    end
                end
            end
        end
    else
        for _,esp in pairs(supplyESP) do
            esp.box.Visible = false
            esp.text.Visible = false
            esp.dist.Visible = false
        end
    end
    
    if espEnabled then
        local rake = workspace:FindFirstChild("Rake")
        if rake and rake:FindFirstChild("HumanoidRootPart") and plr.Character and plr.Character:FindFirstChild("HumanoidRootPart") then
            local pos, vis = cam:WorldToViewportPoint(rake.HumanoidRootPart.Position)
            if vis then
                local size = 2000 / pos.Z
                box.Size = Vector2.new(size, size * 2)
                box.Position = Vector2.new(pos.X - size/2, pos.Y - size)
                box.Visible = true
                
                name.Position = Vector2.new(pos.X, pos.Y - size - 20)
                name.Visible = showName
                
                dist.Position = Vector2.new(pos.X, pos.Y + size + 5)
                dist.Text = math.floor((plr.Character.HumanoidRootPart.Position - rake.HumanoidRootPart.Position).Magnitude).."m"
                dist.Visible = showDist
                
                if showTracer then
                    tracer.From = Vector2.new(cam.ViewportSize.X/2, cam.ViewportSize.Y)
                    tracer.To = Vector2.new(pos.X, pos.Y)
                    tracer.Visible = true
                else
                    tracer.Visible = false
                end
            else
                box.Visible = false
                name.Visible = false
                dist.Visible = false
                tracer.Visible = false
            end
        else
            box.Visible = false
            name.Visible = false
            dist.Visible = false
            tracer.Visible = false
        end
    else
        box.Visible = false
        name.Visible = false
        dist.Visible = false
        tracer.Visible = false
    end
end)

workspace.DescendantRemoving:Connect(function(obj)
    if scrapESP[obj] then
        scrapESP[obj].box:Remove()
        scrapESP[obj].text:Remove()
        scrapESP[obj].dist:Remove()
        scrapESP[obj] = nil
    end
    if supplyESP[obj] then
        supplyESP[obj].box:Remove()
        supplyESP[obj].text:Remove()
        supplyESP[obj].dist:Remove()
        supplyESP[obj] = nil
    end
end)

task.spawn(function()
    while task.wait(5) do
        for model, esp in pairs(scrapESP) do
            if not model.Parent then
                esp.box:Remove()
                esp.text:Remove()
                esp.dist:Remove()
                scrapESP[model] = nil
            end
        end
        
        for model, esp in pairs(supplyESP) do
            if not model.Parent then
                esp.box:Remove()
                esp.text:Remove()
                esp.dist:Remove()
                supplyESP[model] = nil
            end
        end
    end
end)
